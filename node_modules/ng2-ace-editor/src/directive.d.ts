import { EventEmitter, ElementRef, OnInit, OnDestroy, NgZone } from "@angular/core";
import "brace";
import "brace/theme/monokai";
import * as ɵngcc0 from '@angular/core';
export declare class AceEditorDirective implements OnInit, OnDestroy {
    private zone;
    textChanged: EventEmitter<{}>;
    textChange: EventEmitter<{}>;
    _options: any;
    _readOnly: boolean;
    _theme: string;
    _mode: any;
    _autoUpdateContent: boolean;
    _durationBeforeCallback: number;
    _text: string;
    editor: any;
    oldText: any;
    timeoutSaving: any;
    constructor(elementRef: ElementRef, zone: NgZone);
    ngOnInit(): void;
    ngOnDestroy(): void;
    init(): void;
    initEvents(): void;
    updateText(): void;
    options: any;
    readOnly: any;
    theme: any;
    mode: any;
    setMode(mode: any): void;
    text: string;
    setText(text: any): void;
    autoUpdateContent: any;
    durationBeforeCallback: number;
    setDurationBeforeCallback(num: number): void;
    readonly aceEditor: any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AceEditorDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AceEditorDirective, "[ace-editor]", never, {
    "options": "options";
    "readOnly": "readOnly";
    "theme": "theme";
    "mode": "mode";
    "text": "text";
    "autoUpdateContent": "autoUpdateContent";
    "durationBeforeCallback": "durationBeforeCallback";
}, {
    "textChanged": "textChanged";
    "textChange": "textChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgT25Jbml0LCBPbkRlc3Ryb3ksIE5nWm9uZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgXCJicmFjZVwiO1xuaW1wb3J0IFwiYnJhY2UvdGhlbWUvbW9ub2thaVwiO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWNlRWRpdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgem9uZTtcbiAgICB0ZXh0Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICB0ZXh0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIF9vcHRpb25zOiBhbnk7XG4gICAgX3JlYWRPbmx5OiBib29sZWFuO1xuICAgIF90aGVtZTogc3RyaW5nO1xuICAgIF9tb2RlOiBhbnk7XG4gICAgX2F1dG9VcGRhdGVDb250ZW50OiBib29sZWFuO1xuICAgIF9kdXJhdGlvbkJlZm9yZUNhbGxiYWNrOiBudW1iZXI7XG4gICAgX3RleHQ6IHN0cmluZztcbiAgICBlZGl0b3I6IGFueTtcbiAgICBvbGRUZXh0OiBhbnk7XG4gICAgdGltZW91dFNhdmluZzogYW55O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHpvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGluaXQoKTogdm9pZDtcbiAgICBpbml0RXZlbnRzKCk6IHZvaWQ7XG4gICAgdXBkYXRlVGV4dCgpOiB2b2lkO1xuICAgIG9wdGlvbnM6IGFueTtcbiAgICByZWFkT25seTogYW55O1xuICAgIHRoZW1lOiBhbnk7XG4gICAgbW9kZTogYW55O1xuICAgIHNldE1vZGUobW9kZTogYW55KTogdm9pZDtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgc2V0VGV4dCh0ZXh0OiBhbnkpOiB2b2lkO1xuICAgIGF1dG9VcGRhdGVDb250ZW50OiBhbnk7XG4gICAgZHVyYXRpb25CZWZvcmVDYWxsYmFjazogbnVtYmVyO1xuICAgIHNldER1cmF0aW9uQmVmb3JlQ2FsbGJhY2sobnVtOiBudW1iZXIpOiB2b2lkO1xuICAgIHJlYWRvbmx5IGFjZUVkaXRvcjogYW55O1xufVxuIl19